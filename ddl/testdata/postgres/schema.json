{
  "Dialect": "postgres",
  "VersionNums": [
    14,
    2
  ],
  "CatalogName": "sakila",
  "CurrentSchema": "public",
  "DefaultCollation": "English_Singapore.utf8",
  "DefaultCollationValid": true,
  "Extensions": [
    "btree_gist",
    "plpgsql",
    "uuid-ossp"
  ],
  "ExtensionsValid": true,
  "Schemas": [
    {
      "SchemaName": "public",
      "Tables": [
        {
          "TableSchema": "public",
          "TableName": "actor",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "actor",
              "ColumnName": "actor_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "actor",
              "ColumnName": "first_name",
              "ColumnType": "varchar(45)",
              "CharacterLength": "45",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "actor",
              "ColumnName": "last_name",
              "ColumnType": "varchar(45)",
              "CharacterLength": "45",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "actor",
              "ColumnName": "full_name",
              "ColumnType": "text",
              "GeneratedExpr": "(first_name::text || ' '::text) || last_name::text",
              "GeneratedExprStored": true
            },
            {
              "TableSchema": "public",
              "TableName": "actor",
              "ColumnName": "full_name_reversed",
              "ColumnType": "text",
              "GeneratedExpr": "(last_name::text || ' '::text) || first_name::text",
              "GeneratedExprStored": true
            },
            {
              "TableSchema": "public",
              "TableName": "actor",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "actor",
              "ConstraintName": "actor_actor_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "actor_id"
              ]
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "actor",
              "IndexName": "actor_last_name_idx",
              "IndexType": "btree",
              "Columns": [
                "last_name"
              ],
              "Opclasses": [
                "text_ops"
              ],
              "SQL": "CREATE INDEX actor_last_name_idx ON actor USING btree (last_name);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "actor",
              "TriggerName": "actor_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER actor_last_update_before_update_trg BEFORE UPDATE ON actor FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "address",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "address_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "address",
              "ColumnType": "varchar(50)",
              "CharacterLength": "50",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "address2",
              "ColumnType": "varchar(50)",
              "CharacterLength": "50"
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "district",
              "ColumnType": "varchar(20)",
              "CharacterLength": "20",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "city_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "city",
              "ReferencesColumn": "city_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "postal_code",
              "ColumnType": "varchar(10)",
              "CharacterLength": "10"
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "phone",
              "ColumnType": "text",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "address",
              "ConstraintName": "address_address_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "address_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "ConstraintName": "address_city_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "city_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "city",
              "ReferencesColumns": [
                "city_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "address",
              "IndexName": "address_city_id_idx",
              "IndexType": "btree",
              "Columns": [
                "city_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX address_city_id_idx ON address USING btree (city_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "address",
              "TriggerName": "address_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER address_last_update_before_update_trg BEFORE UPDATE ON address FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            },
            {
              "TableSchema": "public",
              "TableName": "address",
              "TriggerName": "address_refresh_full_address_trg",
              "SQL": "CREATE TRIGGER address_refresh_full_address_trg AFTER INSERT OR DELETE OR UPDATE OR TRUNCATE ON address FOR EACH STATEMENT EXECUTE FUNCTION refresh_full_address();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "category",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "category",
              "ColumnName": "category_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "category",
              "ColumnName": "name",
              "ColumnType": "varchar(45)",
              "CharacterLength": "45",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "category",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "category",
              "ConstraintName": "category_category_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "category_id"
              ]
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "category",
              "TriggerName": "category_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER category_last_update_before_update_trg BEFORE UPDATE ON category FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "city",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "city",
              "ColumnName": "city_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "city",
              "ColumnName": "city",
              "ColumnType": "varchar(50)",
              "CharacterLength": "50",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "city",
              "ColumnName": "country_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "country",
              "ReferencesColumn": "country_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "city",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "city",
              "ConstraintName": "city_city_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "city_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "city",
              "ConstraintName": "city_country_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "country_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "country",
              "ReferencesColumns": [
                "country_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "city",
              "IndexName": "city_country_id_idx",
              "IndexType": "btree",
              "Columns": [
                "country_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX city_country_id_idx ON city USING btree (country_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "city",
              "TriggerName": "city_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER city_last_update_before_update_trg BEFORE UPDATE ON city FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            },
            {
              "TableSchema": "public",
              "TableName": "city",
              "TriggerName": "city_refresh_full_address_trg",
              "SQL": "CREATE TRIGGER city_refresh_full_address_trg AFTER INSERT OR DELETE OR UPDATE OR TRUNCATE ON city FOR EACH STATEMENT EXECUTE FUNCTION refresh_full_address();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "country",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "country",
              "ColumnName": "country_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "country",
              "ColumnName": "country",
              "ColumnType": "varchar(50)",
              "CharacterLength": "50",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "country",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "country",
              "ConstraintName": "country_country_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "country_id"
              ]
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "country",
              "TriggerName": "country_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER country_last_update_before_update_trg BEFORE UPDATE ON country FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            },
            {
              "TableSchema": "public",
              "TableName": "country",
              "TriggerName": "country_refresh_full_address_trg",
              "SQL": "CREATE TRIGGER country_refresh_full_address_trg AFTER INSERT OR DELETE OR UPDATE OR TRUNCATE ON country FOR EACH STATEMENT EXECUTE FUNCTION refresh_full_address();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "customer",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "customer_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "store_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "store",
              "ReferencesColumn": "store_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "first_name",
              "ColumnType": "varchar(45)",
              "CharacterLength": "45",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "last_name",
              "ColumnType": "varchar(45)",
              "CharacterLength": "45",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "email",
              "ColumnType": "varchar(50)",
              "CharacterLength": "50",
              "IsUnique": true
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "address_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "address",
              "ReferencesColumn": "address_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "active",
              "ColumnType": "boolean",
              "IsNotNull": true,
              "ColumnDefault": "true"
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "create_date",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ConstraintName": "customer_address_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "address_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "address",
              "ReferencesColumns": [
                "address_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ConstraintName": "customer_customer_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "customer_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ConstraintName": "customer_email_first_name_last_name_key",
              "ConstraintType": "UNIQUE",
              "Columns": [
                "email",
                "first_name",
                "last_name"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ConstraintName": "customer_email_key",
              "ConstraintType": "UNIQUE",
              "Columns": [
                "email"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "ConstraintName": "customer_store_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "store_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "store",
              "ReferencesColumns": [
                "store_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "customer",
              "IndexName": "customer_address_id_idx",
              "IndexType": "btree",
              "Columns": [
                "address_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX customer_address_id_idx ON customer USING btree (address_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "IndexName": "customer_last_name_idx",
              "IndexType": "btree",
              "Columns": [
                "last_name"
              ],
              "Opclasses": [
                "text_ops"
              ],
              "SQL": "CREATE INDEX customer_last_name_idx ON customer USING btree (last_name);"
            },
            {
              "TableSchema": "public",
              "TableName": "customer",
              "IndexName": "customer_store_id_idx",
              "IndexType": "btree",
              "Columns": [
                "store_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX customer_store_id_idx ON customer USING btree (store_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "customer",
              "TriggerName": "customer_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER customer_last_update_before_update_trg BEFORE UPDATE ON customer FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "department",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "department",
              "ColumnName": "department_id",
              "ColumnType": "uuid",
              "IsNotNull": true,
              "IsPrimaryKey": true
            },
            {
              "TableSchema": "public",
              "TableName": "department",
              "ColumnName": "name",
              "ColumnType": "varchar(255)",
              "CharacterLength": "255",
              "IsNotNull": true
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "department",
              "ConstraintName": "department_department_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "department_id"
              ]
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "employee",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "employee",
              "ColumnName": "employee_id",
              "ColumnType": "uuid",
              "IsNotNull": true,
              "IsPrimaryKey": true
            },
            {
              "TableSchema": "public",
              "TableName": "employee",
              "ColumnName": "name",
              "ColumnType": "varchar(255)",
              "CharacterLength": "255",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "employee",
              "ColumnName": "title",
              "ColumnType": "varchar(255)",
              "CharacterLength": "255",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "employee",
              "ColumnName": "manager_id",
              "ColumnType": "uuid",
              "ReferencesSchema": "public",
              "ReferencesTable": "employee",
              "ReferencesColumn": "employee_id"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "employee",
              "ConstraintName": "employee_employee_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "employee_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "employee",
              "ConstraintName": "employee_manager_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "manager_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "employee",
              "ReferencesColumns": [
                "employee_id"
              ]
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "employee",
              "IndexName": "employee_manager_id_idx",
              "IndexType": "btree",
              "Columns": [
                "manager_id"
              ],
              "Opclasses": [
                "uuid_ops"
              ],
              "SQL": "CREATE INDEX employee_manager_id_idx ON employee USING btree (manager_id);"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "employee_department",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "employee_department",
              "ColumnName": "employee_id",
              "ColumnType": "uuid",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "employee",
              "ReferencesColumn": "employee_id"
            },
            {
              "TableSchema": "public",
              "TableName": "employee_department",
              "ColumnName": "department_id",
              "ColumnType": "uuid",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "department",
              "ReferencesColumn": "department_id"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "employee_department",
              "ConstraintName": "employee_department_department_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "department_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "department",
              "ReferencesColumns": [
                "department_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "employee_department",
              "ConstraintName": "employee_department_employee_id_department_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "employee_id",
                "department_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "employee_department",
              "ConstraintName": "employee_department_employee_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "employee_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "employee",
              "ReferencesColumns": [
                "employee_id"
              ]
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "employee_department",
              "IndexName": "employee_department_department_id_idx",
              "IndexType": "btree",
              "Columns": [
                "department_id"
              ],
              "Opclasses": [
                "uuid_ops"
              ],
              "SQL": "CREATE INDEX employee_department_department_id_idx ON employee_department USING btree (department_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "employee_department",
              "IndexName": "employee_department_employee_id_idx",
              "IndexType": "btree",
              "Columns": [
                "employee_id"
              ],
              "Opclasses": [
                "uuid_ops"
              ],
              "SQL": "CREATE INDEX employee_department_employee_id_idx ON employee_department USING btree (employee_id);"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "film",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "film_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "title",
              "ColumnType": "text",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "description",
              "ColumnType": "text"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "release_year",
              "ColumnType": "int",
              "DomainName": "year"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "language_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "language",
              "ReferencesColumn": "language_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "original_language_id",
              "ColumnType": "int",
              "ReferencesSchema": "public",
              "ReferencesTable": "language",
              "ReferencesColumn": "language_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "rental_duration",
              "ColumnType": "int",
              "IsNotNull": true,
              "ColumnDefault": "3"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "rental_rate",
              "ColumnType": "numeric(4,2)",
              "NumericPrecision": "4",
              "NumericScale": "2",
              "IsNotNull": true,
              "ColumnDefault": "4.99"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "length",
              "ColumnType": "int"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "replacement_cost",
              "ColumnType": "numeric(5,2)",
              "NumericPrecision": "5",
              "NumericScale": "2",
              "IsNotNull": true,
              "ColumnDefault": "19.99"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "rating",
              "ColumnType": "mpaa_rating",
              "IsEnum": true,
              "ColumnDefault": "'G'::mpaa_rating"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "special_features",
              "ColumnType": "text[]"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ColumnName": "fulltext",
              "ColumnType": "tsvector"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "film",
              "ConstraintName": "film_film_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "film_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ConstraintName": "film_language_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "language_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "language",
              "ReferencesColumns": [
                "language_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "ConstraintName": "film_original_language_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "original_language_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "language",
              "ReferencesColumns": [
                "language_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "film",
              "IndexName": "film_fulltext_idx",
              "IndexType": "gin",
              "Columns": [
                "fulltext"
              ],
              "Opclasses": [
                "tsvector_ops"
              ],
              "SQL": "CREATE INDEX film_fulltext_idx ON film USING gin (fulltext);"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "IndexName": "film_language_id_idx",
              "IndexType": "btree",
              "Columns": [
                "language_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX film_language_id_idx ON film USING btree (language_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "IndexName": "film_original_language_id_idx",
              "IndexType": "btree",
              "Columns": [
                "original_language_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX film_original_language_id_idx ON film USING btree (original_language_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "IndexName": "film_title_idx",
              "IndexType": "btree",
              "Columns": [
                "title"
              ],
              "Opclasses": [
                "text_ops"
              ],
              "SQL": "CREATE INDEX film_title_idx ON film USING btree (title);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "film",
              "TriggerName": "film_fulltext_before_insert_update_trg",
              "SQL": "CREATE TRIGGER film_fulltext_before_insert_update_trg BEFORE INSERT OR UPDATE ON film FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('fulltext', 'pg_catalog.english', 'title', 'description');"
            },
            {
              "TableSchema": "public",
              "TableName": "film",
              "TriggerName": "film_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER film_last_update_before_update_trg BEFORE UPDATE ON film FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "film_actor",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "ColumnName": "actor_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "actor",
              "ReferencesColumn": "actor_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "ColumnName": "film_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "film",
              "ReferencesColumn": "film_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "ConstraintName": "film_actor_actor_id_film_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "actor_id",
                "film_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "ConstraintName": "film_actor_actor_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "actor_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "actor",
              "ReferencesColumns": [
                "actor_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "ConstraintName": "film_actor_film_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "film_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "film",
              "ReferencesColumns": [
                "film_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "IndexName": "film_actor_film_id_idx",
              "IndexType": "btree",
              "Columns": [
                "film_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX film_actor_film_id_idx ON film_actor USING btree (film_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "film_actor",
              "TriggerName": "film_actor_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER film_actor_last_update_before_update_trg BEFORE UPDATE ON film_actor FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "film_category",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "film_category",
              "ColumnName": "film_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "film",
              "ReferencesColumn": "film_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film_category",
              "ColumnName": "category_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "category",
              "ReferencesColumn": "category_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film_category",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "film_category",
              "ConstraintName": "film_category_category_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "category_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "category",
              "ReferencesColumns": [
                "category_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "film_category",
              "ConstraintName": "film_category_film_id_category_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "film_id",
                "category_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "film_category",
              "ConstraintName": "film_category_film_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "film_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "film",
              "ReferencesColumns": [
                "film_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "film_category",
              "TriggerName": "film_category_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER film_category_last_update_before_update_trg BEFORE UPDATE ON film_category FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "inventory",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "ColumnName": "inventory_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "ColumnName": "film_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "film",
              "ReferencesColumn": "film_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "ColumnName": "store_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "store",
              "ReferencesColumn": "store_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "ConstraintName": "inventory_film_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "film_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "film",
              "ReferencesColumns": [
                "film_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "ConstraintName": "inventory_inventory_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "inventory_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "ConstraintName": "inventory_store_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "store_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "store",
              "ReferencesColumns": [
                "store_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "IndexName": "inventory_film_id_idx",
              "IndexType": "btree",
              "Columns": [
                "film_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX inventory_film_id_idx ON inventory USING btree (film_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "IndexName": "inventory_store_id_film_id_idx",
              "IndexType": "btree",
              "Columns": [
                "store_id",
                "film_id"
              ],
              "Opclasses": [
                "int4_ops",
                "int4_ops"
              ],
              "SQL": "CREATE INDEX inventory_store_id_film_id_idx ON inventory USING btree (store_id, film_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "inventory",
              "TriggerName": "inventory_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER inventory_last_update_before_update_trg BEFORE UPDATE ON inventory FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "language",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "language",
              "ColumnName": "language_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "language",
              "ColumnName": "name",
              "ColumnType": "text",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "language",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "language",
              "ConstraintName": "language_language_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "language_id"
              ]
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "language",
              "TriggerName": "language_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER language_last_update_before_update_trg BEFORE UPDATE ON language FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "payment",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ColumnName": "payment_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ColumnName": "customer_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "customer",
              "ReferencesColumn": "customer_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ColumnName": "staff_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "staff",
              "ReferencesColumn": "staff_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ColumnName": "rental_id",
              "ColumnType": "int",
              "ReferencesSchema": "public",
              "ReferencesTable": "rental",
              "ReferencesColumn": "rental_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "SET NULL",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ColumnName": "amount",
              "ColumnType": "numeric(5,2)",
              "NumericPrecision": "5",
              "NumericScale": "2",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ColumnName": "payment_date",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ConstraintName": "payment_customer_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "customer_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "customer",
              "ReferencesColumns": [
                "customer_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ConstraintName": "payment_payment_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "payment_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ConstraintName": "payment_rental_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "rental_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "rental",
              "ReferencesColumns": [
                "rental_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "SET NULL",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "ConstraintName": "payment_staff_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "staff_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "staff",
              "ReferencesColumns": [
                "staff_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "payment",
              "IndexName": "payment_customer_id_idx",
              "IndexType": "btree",
              "Columns": [
                "customer_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX payment_customer_id_idx ON payment USING btree (customer_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "IndexName": "payment_rental_id_idx",
              "IndexType": "btree",
              "Columns": [
                "rental_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX payment_rental_id_idx ON payment USING btree (rental_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "payment",
              "IndexName": "payment_staff_id_idx",
              "IndexType": "btree",
              "Columns": [
                "staff_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX payment_staff_id_idx ON payment USING btree (staff_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "payment",
              "TriggerName": "payment_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER payment_last_update_before_update_trg BEFORE UPDATE ON payment FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "rental",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ColumnName": "rental_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ColumnName": "rental_date",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ColumnName": "inventory_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "inventory",
              "ReferencesColumn": "inventory_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ColumnName": "customer_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "customer",
              "ReferencesColumn": "customer_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ColumnName": "return_date",
              "ColumnType": "timestamptz"
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ColumnName": "staff_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "staff",
              "ReferencesColumn": "staff_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ConstraintName": "rental_customer_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "customer_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "customer",
              "ReferencesColumns": [
                "customer_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ConstraintName": "rental_inventory_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "inventory_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "inventory",
              "ReferencesColumns": [
                "inventory_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ConstraintName": "rental_no_overlap",
              "ConstraintType": "EXCLUDE",
              "Columns": [
                "inventory_id",
                "tstzrange(rental_date, return_date)"
              ],
              "ExclusionOperators": [
                "=",
                "\u0026\u0026"
              ],
              "ExclusionIndexType": "gist"
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ConstraintName": "rental_rental_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "rental_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "ConstraintName": "rental_staff_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "staff_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "staff",
              "ReferencesColumns": [
                "staff_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "rental",
              "IndexName": "rental_customer_id_idx",
              "IndexType": "btree",
              "Columns": [
                "customer_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX rental_customer_id_idx ON rental USING btree (customer_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "IndexName": "rental_inventory_id_customer_id_staff_id_idx",
              "IndexType": "btree",
              "IsUnique": true,
              "Columns": [
                "inventory_id",
                "customer_id",
                "staff_id"
              ],
              "Opclasses": [
                "int4_ops",
                "int4_ops",
                "int4_ops"
              ],
              "SQL": "CREATE UNIQUE INDEX rental_inventory_id_customer_id_staff_id_idx ON rental USING btree (inventory_id, customer_id, staff_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "IndexName": "rental_inventory_id_idx",
              "IndexType": "btree",
              "Columns": [
                "inventory_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX rental_inventory_id_idx ON rental USING btree (inventory_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "rental",
              "IndexName": "rental_staff_id_idx",
              "IndexType": "btree",
              "Columns": [
                "staff_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX rental_staff_id_idx ON rental USING btree (staff_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "rental",
              "TriggerName": "rental_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER rental_last_update_before_update_trg BEFORE UPDATE ON rental FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "staff",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "staff_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "first_name",
              "ColumnType": "varchar(45)",
              "CharacterLength": "45",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "last_name",
              "ColumnType": "varchar(45)",
              "CharacterLength": "45",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "address_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "address",
              "ReferencesColumn": "address_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "picture",
              "ColumnType": "bytea"
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "email",
              "ColumnType": "varchar(50)",
              "CharacterLength": "50",
              "IsUnique": true
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "store_id",
              "ColumnType": "int",
              "ReferencesSchema": "public",
              "ReferencesTable": "store",
              "ReferencesColumn": "store_id",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "active",
              "ColumnType": "boolean",
              "IsNotNull": true,
              "ColumnDefault": "true"
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "username",
              "ColumnType": "varchar(16)",
              "CharacterLength": "16",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "password",
              "ColumnType": "varchar(40)",
              "CharacterLength": "40"
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ConstraintName": "staff_address_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "address_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "address",
              "ReferencesColumns": [
                "address_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ConstraintName": "staff_email_key",
              "ConstraintType": "UNIQUE",
              "Columns": [
                "email"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ConstraintName": "staff_staff_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "staff_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "ConstraintName": "staff_store_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "store_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "store",
              "ReferencesColumns": [
                "store_id"
              ],
              "IsDeferrable": true
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "staff",
              "IndexName": "staff_address_id_idx",
              "IndexType": "btree",
              "Columns": [
                "address_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX staff_address_id_idx ON staff USING btree (address_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "staff",
              "IndexName": "staff_store_id_idx",
              "IndexType": "btree",
              "Columns": [
                "store_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX staff_store_id_idx ON staff USING btree (store_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "staff",
              "TriggerName": "staff_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER staff_last_update_before_update_trg BEFORE UPDATE ON staff FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "store",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "store",
              "ColumnName": "store_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "IsPrimaryKey": true,
              "ColumnIdentity": "GENERATED BY DEFAULT AS IDENTITY"
            },
            {
              "TableSchema": "public",
              "TableName": "store",
              "ColumnName": "manager_staff_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "staff",
              "ReferencesColumn": "staff_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "store",
              "ColumnName": "address_id",
              "ColumnType": "int",
              "IsNotNull": true,
              "ReferencesSchema": "public",
              "ReferencesTable": "address",
              "ReferencesColumn": "address_id",
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "store",
              "ColumnName": "last_update",
              "ColumnType": "timestamptz",
              "IsNotNull": true,
              "ColumnDefault": "CURRENT_TIMESTAMP"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "store",
              "ConstraintName": "store_address_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "address_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "address",
              "ReferencesColumns": [
                "address_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "store",
              "ConstraintName": "store_manager_staff_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "manager_staff_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "staff",
              "ReferencesColumns": [
                "staff_id"
              ],
              "UpdateRule": "CASCADE",
              "DeleteRule": "RESTRICT",
              "IsDeferrable": true
            },
            {
              "TableSchema": "public",
              "TableName": "store",
              "ConstraintName": "store_store_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "store_id"
              ]
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "store",
              "IndexName": "store_address_id_idx",
              "IndexType": "btree",
              "Columns": [
                "address_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX store_address_id_idx ON store USING btree (address_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "store",
              "IndexName": "store_manager_staff_id_idx",
              "IndexType": "btree",
              "Columns": [
                "manager_staff_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE INDEX store_manager_staff_id_idx ON store USING btree (manager_staff_id);"
            }
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "store",
              "TriggerName": "store_last_update_before_update_trg",
              "SQL": "CREATE TRIGGER store_last_update_before_update_trg BEFORE UPDATE ON store FOR EACH ROW EXECUTE FUNCTION last_update_trg();"
            }
          ]
        },
        {
          "TableSchema": "public",
          "TableName": "task",
          "Columns": [
            {
              "TableSchema": "public",
              "TableName": "task",
              "ColumnName": "task_id",
              "ColumnType": "uuid",
              "IsNotNull": true,
              "IsPrimaryKey": true
            },
            {
              "TableSchema": "public",
              "TableName": "task",
              "ColumnName": "employee_id",
              "ColumnType": "uuid",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "task",
              "ColumnName": "department_id",
              "ColumnType": "uuid",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "task",
              "ColumnName": "task",
              "ColumnType": "varchar(255)",
              "CharacterLength": "255",
              "IsNotNull": true
            },
            {
              "TableSchema": "public",
              "TableName": "task",
              "ColumnName": "data",
              "ColumnType": "jsonb"
            }
          ],
          "Constraints": [
            {
              "TableSchema": "public",
              "TableName": "task",
              "ConstraintName": "task_employee_id_department_id_fkey",
              "ConstraintType": "FOREIGN KEY",
              "Columns": [
                "employee_id",
                "department_id"
              ],
              "ReferencesSchema": "public",
              "ReferencesTable": "employee_department",
              "ReferencesColumns": [
                "employee_id",
                "department_id"
              ]
            },
            {
              "TableSchema": "public",
              "TableName": "task",
              "ConstraintName": "task_task_id_pkey",
              "ConstraintType": "PRIMARY KEY",
              "Columns": [
                "task_id"
              ]
            }
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "task",
              "IndexName": "task_data_idx",
              "IndexType": "btree",
              "Columns": [
                "(data -\u003e\u003e 'deadline'::text)"
              ],
              "Opclasses": [
                "text_ops"
              ],
              "Predicate": "data IS NOT NULL",
              "SQL": "CREATE INDEX task_data_idx ON task USING btree ((data -\u003e\u003e 'deadline'::text) DESC) WHERE data IS NOT NULL;"
            },
            {
              "TableSchema": "public",
              "TableName": "task",
              "IndexName": "task_employee_id_department_id_idx",
              "IndexType": "btree",
              "Columns": [
                "employee_id",
                "department_id"
              ],
              "Opclasses": [
                "uuid_ops",
                "uuid_ops"
              ],
              "SQL": "CREATE INDEX task_employee_id_department_id_idx ON task USING btree (employee_id, department_id);"
            },
            {
              "TableSchema": "public",
              "TableName": "task",
              "IndexName": "task_task_idx",
              "IndexType": "btree",
              "Columns": [
                "task"
              ],
              "IncludeColumns": [
                "employee_id",
                "department_id"
              ],
              "Opclasses": [
                "varchar_pattern_ops",
                "",
                ""
              ],
              "SQL": "CREATE INDEX task_task_idx ON task USING btree (task COLLATE \"C\" varchar_pattern_ops DESC) INCLUDE (employee_id, department_id);"
            }
          ]
        }
      ],
      "Views": [
        {
          "ViewSchema": "public",
          "ViewName": "actor_info",
          "SQL": " SELECT a.actor_id,\n    a.first_name,\n    a.last_name,\n    jsonb_object_agg(c.name, ( SELECT jsonb_agg(f.title) AS jsonb_agg\n           FROM film f\n             JOIN film_category fc_1 ON fc_1.film_id = f.film_id\n             JOIN film_actor fa_1 ON fa_1.film_id = f.film_id\n          WHERE fc_1.category_id = c.category_id AND fa_1.actor_id = a.actor_id\n          GROUP BY fa_1.actor_id)) AS film_info\n   FROM actor a\n     LEFT JOIN film_actor fa ON fa.actor_id = a.actor_id\n     LEFT JOIN film_category fc ON fc.film_id = fa.film_id\n     LEFT JOIN category c ON c.category_id = fc.category_id\n  GROUP BY a.actor_id, a.first_name, a.last_name;",
          "Columns": [
            "actor_id",
            "first_name",
            "last_name",
            "film_info"
          ],
          "ColumnTypes": [
            "INTEGER",
            "CHARACTER VARYING(45)",
            "CHARACTER VARYING(45)",
            "JSONB"
          ]
        },
        {
          "ViewSchema": "public",
          "ViewName": "customer_list",
          "SQL": " SELECT cu.customer_id AS id,\n    (cu.first_name::text || ' '::text) || cu.last_name::text AS name,\n    a.address,\n    a.postal_code AS \"zip code\",\n    a.phone,\n    city.city,\n    country.country,\n        CASE\n            WHEN cu.active THEN 'active'::text\n            ELSE ''::text\n        END AS notes,\n    cu.store_id AS sid\n   FROM customer cu\n     JOIN address a ON a.address_id = cu.address_id\n     JOIN city ON city.city_id = a.city_id\n     JOIN country ON country.country_id = city.country_id;",
          "Columns": [
            "id",
            "name",
            "address",
            "zip code",
            "phone",
            "city",
            "country",
            "notes",
            "sid"
          ],
          "ColumnTypes": [
            "INTEGER",
            "TEXT",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(10)",
            "TEXT",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(50)",
            "TEXT",
            "INTEGER"
          ]
        },
        {
          "ViewSchema": "public",
          "ViewName": "film_list",
          "SQL": " SELECT film.film_id AS fid,\n    film.title,\n    film.description,\n    category.name AS category,\n    film.rental_rate AS price,\n    film.length,\n    film.rating,\n    jsonb_agg((actor.first_name::text || ' '::text) || actor.last_name::text) AS actors\n   FROM category\n     LEFT JOIN film_category ON film_category.category_id = category.category_id\n     LEFT JOIN film ON film.film_id = film_category.film_id\n     JOIN film_actor ON film_actor.film_id = film.film_id\n     JOIN actor ON actor.actor_id = film_actor.actor_id\n  GROUP BY film.film_id, film.title, film.description, category.name, film.rental_rate, film.length, film.rating;",
          "Columns": [
            "fid",
            "title",
            "description",
            "category",
            "price",
            "length",
            "rating",
            "actors"
          ],
          "ColumnTypes": [
            "INTEGER",
            "TEXT",
            "TEXT",
            "CHARACTER VARYING(45)",
            "NUMERIC(4,2)",
            "INTEGER",
            "MPAA_RATING",
            "JSONB"
          ],
          "EnumColumns": [
            "rating"
          ],
          "Triggers": [
            {
              "TableSchema": "public",
              "TableName": "film_list",
              "TriggerName": "update_film_list_trg",
              "IsViewTrigger": true,
              "SQL": "CREATE TRIGGER update_film_list_trg INSTEAD OF UPDATE ON film_list FOR EACH ROW EXECUTE FUNCTION update_film_list();"
            }
          ]
        },
        {
          "ViewSchema": "public",
          "ViewName": "full_address",
          "IsMaterialized": true,
          "SQL": " SELECT country.country_id,\n    city.city_id,\n    address.address_id,\n    country.country,\n    city.city,\n    address.address,\n    address.address2,\n    address.district,\n    address.postal_code,\n    address.phone,\n    address.last_update\n   FROM address\n     JOIN city ON city.city_id = address.city_id\n     JOIN country ON country.country_id = city.country_id;",
          "Columns": [
            "country_id",
            "city_id",
            "address_id",
            "country",
            "city",
            "address",
            "address2",
            "district",
            "postal_code",
            "phone",
            "last_update"
          ],
          "ColumnTypes": [
            "INTEGER",
            "INTEGER",
            "INTEGER",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(20)",
            "CHARACTER VARYING(10)",
            "TEXT",
            "TIMESTAMP WITH TIME ZONE"
          ],
          "Indexes": [
            {
              "TableSchema": "public",
              "TableName": "full_address",
              "IndexName": "full_address_address_id_idx",
              "IndexType": "btree",
              "IsViewIndex": true,
              "IsUnique": true,
              "Columns": [
                "address_id"
              ],
              "Opclasses": [
                "int4_ops"
              ],
              "SQL": "CREATE UNIQUE INDEX full_address_address_id_idx ON full_address USING btree (address_id);"
            }
          ]
        },
        {
          "ViewSchema": "public",
          "ViewName": "nicer_but_slower_film_list",
          "SQL": " SELECT film.film_id AS fid,\n    film.title,\n    film.description,\n    category.name AS category,\n    film.rental_rate AS price,\n    film.length,\n    film.rating,\n    jsonb_agg((((upper(\"substring\"(actor.first_name::text, 1, 1)) || lower(\"substring\"(actor.first_name::text, 2))) || ' '::text) || upper(\"substring\"(actor.last_name::text, 1, 1))) || lower(\"substring\"(actor.last_name::text, 2))) AS actors\n   FROM category\n     LEFT JOIN film_category ON film_category.category_id = category.category_id\n     LEFT JOIN film ON film.film_id = film_category.film_id\n     JOIN film_actor ON film_actor.film_id = film.film_id\n     JOIN actor ON actor.actor_id = film_actor.actor_id\n  GROUP BY film.film_id, film.title, film.description, category.name, film.rental_rate, film.length, film.rating;",
          "Columns": [
            "fid",
            "title",
            "description",
            "category",
            "price",
            "length",
            "rating",
            "actors"
          ],
          "ColumnTypes": [
            "INTEGER",
            "TEXT",
            "TEXT",
            "CHARACTER VARYING(45)",
            "NUMERIC(4,2)",
            "INTEGER",
            "MPAA_RATING",
            "JSONB"
          ],
          "EnumColumns": [
            "rating"
          ]
        },
        {
          "ViewSchema": "public",
          "ViewName": "sales_by_film_category",
          "SQL": " SELECT c.name AS category,\n    sum(p.amount) AS total_sales\n   FROM payment p\n     JOIN rental r ON r.rental_id = p.rental_id\n     JOIN inventory i ON i.inventory_id = r.inventory_id\n     JOIN film f ON f.film_id = i.film_id\n     JOIN film_category fc ON fc.film_id = f.film_id\n     JOIN category c ON c.category_id = fc.category_id\n  GROUP BY c.name;",
          "Columns": [
            "category",
            "total_sales"
          ],
          "ColumnTypes": [
            "CHARACTER VARYING(45)",
            "NUMERIC"
          ]
        },
        {
          "ViewSchema": "public",
          "ViewName": "sales_by_store",
          "SQL": " SELECT (ci.city::text || ','::text) || co.country::text AS store,\n    (m.first_name::text || ' '::text) || m.last_name::text AS manager,\n    sum(p.amount) AS total_sales\n   FROM payment p\n     JOIN rental r ON r.rental_id = p.rental_id\n     JOIN inventory i ON i.inventory_id = r.inventory_id\n     JOIN store s ON s.store_id = i.store_id\n     JOIN address a ON a.address_id = s.address_id\n     JOIN city ci ON ci.city_id = a.city_id\n     JOIN country co ON co.country_id = ci.country_id\n     JOIN staff m ON m.staff_id = s.manager_staff_id\n  GROUP BY co.country, ci.city, s.store_id, m.first_name, m.last_name;",
          "Columns": [
            "store",
            "manager",
            "total_sales"
          ],
          "ColumnTypes": [
            "TEXT",
            "TEXT",
            "NUMERIC"
          ]
        },
        {
          "ViewSchema": "public",
          "ViewName": "staff_list",
          "SQL": " SELECT s.staff_id AS id,\n    (s.first_name::text || ' '::text) || s.last_name::text AS name,\n    a.address,\n    a.postal_code AS \"zip code\",\n    a.phone,\n    ci.city,\n    co.country,\n    s.store_id AS sid\n   FROM staff s\n     JOIN address a ON a.address_id = s.address_id\n     JOIN city ci ON ci.city_id = a.city_id\n     JOIN country co ON co.country_id = ci.country_id;",
          "Columns": [
            "id",
            "name",
            "address",
            "zip code",
            "phone",
            "city",
            "country",
            "sid"
          ],
          "ColumnTypes": [
            "INTEGER",
            "TEXT",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(10)",
            "TEXT",
            "CHARACTER VARYING(50)",
            "CHARACTER VARYING(50)",
            "INTEGER"
          ]
        }
      ],
      "ViewsValid": true,
      "Routines": [
        {
          "RoutineSchema": "public",
          "RoutineName": "film_in_stock",
          "IdentityArguments": "IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer",
          "RoutineType": "PROCEDURE",
          "SQL": "CREATE OR REPLACE PROCEDURE public.film_in_stock(IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer)\n LANGUAGE plpgsql\nAS $procedure$\nBEGIN\n    SELECT COUNT(*)\n    INTO p_film_count\n    FROM inventory\n    WHERE\n        film_id = p_film_id\n        AND store_id = p_store_id\n        AND inventory_in_stock(inventory_id)\n    ;\nEND\n$procedure$\n;",
          "Attrs": {
            "returnType": ""
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "film_not_in_stock",
          "IdentityArguments": "IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer",
          "RoutineType": "PROCEDURE",
          "SQL": "CREATE OR REPLACE PROCEDURE public.film_not_in_stock(IN p_film_id integer, IN p_store_id integer, OUT p_film_count integer)\n LANGUAGE plpgsql\nAS $procedure$\nBEGIN\n    SELECT COUNT(*)\n    INTO p_film_count\n    FROM inventory\n    WHERE\n        film_id = p_film_id\n        AND store_id = p_store_id\n        AND NOT inventory_in_stock(inventory_id)\n    ;\nEND\n$procedure$\n;",
          "Attrs": {
            "returnType": ""
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "get_customer_balance",
          "IdentityArguments": "p_customer_id integer, p_effective_date timestamp with time zone",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.get_customer_balance(p_customer_id integer, p_effective_date timestamp with time zone)\n RETURNS numeric\n LANGUAGE plpgsql\nAS $function$ DECLARE\n    -- OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A DATE\n    -- THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:\n    --    1) RENTAL FEES FOR ALL PREVIOUS RENTALS\n    --    2) ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE\n    --    3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST\n    --    4) SUBTRACT ALL PAYMENTS MADE BEFORE THE DATE SPECIFIED\n    v_rentfees DECIMAL(5,2); -- FEES PAID TO RENT THE VIDEOS INITIALLY\n    v_overfees INT;          -- LATE FEES FOR PRIOR RENTALS\n    v_payments DECIMAL(5,2); -- SUM OF PAYMENTS MADE PREVIOUSLY\nBEGIN\n    SELECT COALESCE(SUM(film.rental_rate), 0)\n    INTO v_rentfees\n    FROM film, inventory, rental\n    WHERE\n        film.film_id = inventory.film_id\n        AND inventory.inventory_id = rental.inventory_id\n        AND rental.rental_date \u003c= p_effective_date\n        AND rental.customer_id = p_customer_id\n    ;\n    SELECT COALESCE(SUM(CASE\n        WHEN (rental.return_date - rental.rental_date) \u003e (film.rental_duration * '1 day'::INTERVAL)\n        THEN EXTRACT(DAY FROM (rental.return_date - rental.rental_date) - (film.rental_duration * '1 day'::INTERVAL))::INT\n        ELSE 0\n    END), 0)\n    INTO v_overfees\n    FROM rental, inventory, film\n    WHERE\n        film.film_id = inventory.film_id\n        AND inventory.inventory_id = rental.inventory_id\n        AND rental.rental_date \u003c= p_effective_date\n        AND rental.customer_id = p_customer_id\n    ;\n    SELECT COALESCE(SUM(payment.amount), 0)\n    INTO v_payments\n    FROM payment\n    WHERE\n        payment.payment_date \u003c= p_effective_date\n        AND payment.customer_id = p_customer_id\n    ;\n    RETURN v_rentfees + v_overfees - v_payments;\nEND $function$\n;",
          "Attrs": {
            "returnType": "numeric"
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "inventory_held_by_customer",
          "IdentityArguments": "p_inventory_id integer",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.inventory_held_by_customer(p_inventory_id integer)\n RETURNS integer\n LANGUAGE plpgsql\nAS $function$ DECLARE\n    v_customer_id INT;\nBEGIN\n    SELECT customer_id\n    INTO v_customer_id\n    FROM rental\n    WHERE\n        return_date IS NULL\n        AND inventory_id = p_inventory_id\n    ;\n\n    RETURN v_customer_id;\nEND $function$\n;",
          "Attrs": {
            "returnType": "integer"
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "inventory_in_stock",
          "IdentityArguments": "p_inventory_id integer",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.inventory_in_stock(p_inventory_id integer)\n RETURNS boolean\n LANGUAGE plpgsql\nAS $function$ DECLARE\n    v_rentals INT;\n    v_out     INT;\nBEGIN\n    -- AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE\n    -- FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED\n    SELECT COUNT(*) INTO v_rentals\n    FROM rental\n    WHERE inventory_id = p_inventory_id\n    ;\n    IF v_rentals = 0 THEN\n      RETURN TRUE;\n    END IF;\n    SELECT\n        COUNT(rental_id) INTO v_out\n    FROM\n        inventory\n        LEFT JOIN rental USING(inventory_id)\n    WHERE\n        inventory.inventory_id = p_inventory_id\n        AND rental.return_date IS NULL\n    ;\n    IF v_out \u003e 0 THEN\n      RETURN FALSE;\n    ELSE\n      RETURN TRUE;\n    END IF;\nEND $function$\n;",
          "Attrs": {
            "returnType": "boolean"
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "last_day",
          "IdentityArguments": "timestamp with time zone",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.last_day(timestamp with time zone)\n RETURNS date\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\n    SELECT\n        CASE\n            WHEN EXTRACT(MONTH FROM $1) = 12\n            THEN (((EXTRACT(YEAR FROM $1) + 1) || '-01-01')::DATE - INTERVAL '1 day')::DATE\n        ELSE\n            ((EXTRACT(YEAR FROM $1) || '-' || (EXTRACT(MONTH FROM $1) + 1) || '-01')::DATE - INTERVAL '1 day')::DATE\n        END\n$function$\n;",
          "Attrs": {
            "returnType": "date"
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "last_update_trg",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.last_update_trg()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$ BEGIN\n    NEW.last_update = NOW();\n    RETURN NEW;\nEND; $function$\n;",
          "Attrs": {
            "returnType": "trigger"
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "refresh_full_address",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.refresh_full_address()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$ BEGIN\n    REFRESH MATERIALIZED VIEW CONCURRENTLY full_address;\n    RETURN NULL;\nEND; $function$\n;",
          "Attrs": {
            "returnType": "trigger"
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "rewards_report",
          "IdentityArguments": "min_monthly_purchases integer, min_dollar_amount_purchased numeric",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.rewards_report(min_monthly_purchases integer, min_dollar_amount_purchased numeric)\n RETURNS SETOF customer\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$ DECLARE\n    last_month_start DATE;\n    last_month_end DATE;\n    rr RECORD;\n    -- tmpSQL TEXT;\nBEGIN\n    /* Some sanity checks... */\n    IF min_monthly_purchases = 0 THEN\n        RAISE EXCEPTION 'Minimum monthly purchases parameter must be \u003e 0';\n    END IF;\n    IF min_dollar_amount_purchased = 0.00 THEN\n        RAISE EXCEPTION 'Minimum monthly dollar amount purchased parameter must be \u003e $0.00';\n    END IF;\n\n    last_month_start := CURRENT_DATE - '1 month'::INTERVAL;\n    last_month_start := to_date((extract(YEAR FROM last_month_start) || '-' || extract(MONTH FROM last_month_start) || '-01'),'YYYY-MM-DD');\n    last_month_end := LAST_DAY(last_month_start);\n\n    /*\n    Create a temporary storage area for Customer IDs.\n    */\n    CREATE TEMPORARY TABLE tmpCustomer (customer_id INT NOT NULL PRIMARY KEY);\n\n    /*\n    Find all customers meeting the monthly purchase requirements\n    */\n    INSERT INTO tmpCustomer (customer_id)\n    SELECT p.customer_id\n    FROM payment AS p\n    WHERE DATE(p.payment_date) BETWEEN last_month_start AND last_month_end\n    GROUP BY customer_id\n    HAVING SUM(p.amount) \u003e min_dollar_amount_purchased\n    AND COUNT(customer_id) \u003e min_monthly_purchases;\n\n    /*\n    Output ALL customer information of matching rewardees.\n    Customize output as needed.\n    */\n    FOR rr IN SELECT c.* FROM tmpCustomer AS t INNER JOIN customer AS c ON t.customer_id = c.customer_id\n    LOOP\n        RETURN NEXT rr;\n    END LOOP;\n\n    /* Clean up */\n    DROP TABLE tmpCustomer;\nEND\n$function$\n;",
          "Attrs": {
            "returnType": "SETOF customer"
          }
        },
        {
          "RoutineSchema": "public",
          "RoutineName": "update_film_list",
          "RoutineType": "FUNCTION",
          "SQL": "CREATE OR REPLACE FUNCTION public.update_film_list()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$ BEGIN\n    IF TG_OP \u003c\u003e 'UPDATE' THEN\n        RAISE EXCEPTION 'Invalid operation on film_list: %', TG_OP;\n    END IF;\n\n    IF OLD.fid IS NULL THEN\n        RAISE EXCEPTION 'Unable to update film_list, film_list.fid is missing';\n    END IF;\n\n    IF NEW.fid \u003c\u003e OLD.fid THEN\n        RAISE EXCEPTION 'You are not allowed to update film_list.fid';\n    END IF;\n\n    IF NEW.category \u003c\u003e OLD.category THEN\n        RAISE EXCEPTION 'You are not allowed to update film_list.category';\n    END IF;\n\n    IF NEW.actors \u003c\u003e OLD.actors THEN\n        RAISE EXCEPTION 'You are not allowed to update film_list.actors';\n    END IF;\n\n    IF NEW.title \u003c\u003e OLD.title\n        OR NEW.description \u003c\u003e OLD.description\n        OR NEW.price \u003c\u003e OLD.price\n        OR NEW.length \u003c\u003e OLD.length\n        OR NEW.rating \u003c\u003e OLD.rating\n    THEN\n        UPDATE film\n        SET\n            title = NEW.title\n            ,description = NEW.description\n            ,rental_rate = NEW.price\n            ,length = NEW.length\n            ,rating = NEW.rating\n        WHERE\n            film_id = NEW.fid\n        ;\n    END IF;\n\n    RETURN NEW;\nEND; $function$\n;",
          "Attrs": {
            "returnType": "trigger"
          }
        }
      ],
      "RoutinesValid": true,
      "Enums": [
        {
          "EnumSchema": "public",
          "EnumName": "mpaa_rating",
          "EnumLabels": [
            "G",
            "PG",
            "PG-13",
            "R",
            "NC-17"
          ]
        }
      ],
      "EnumsValid": true,
      "Domains": [
        {
          "DomainSchema": "public",
          "DomainName": "year",
          "UnderlyingType": "integer",
          "CheckNames": [
            "year_check"
          ],
          "CheckExprs": [
            "(VALUE \u003e= 1901 AND VALUE \u003c= 2155)"
          ]
        }
      ],
      "DomainsValid": true
    }
  ]
}
