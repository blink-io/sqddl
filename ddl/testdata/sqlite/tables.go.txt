package sakila

import "github.com/blink-io/sq"

type ACTOR struct {
	sq.TableStruct
	ACTOR_ID           sq.NumberField `ddl:"primarykey"`
	FIRST_NAME         sq.StringField `ddl:"notnull"`
	LAST_NAME          sq.StringField `ddl:"notnull index"`
	FULL_NAME          sq.StringField `ddl:"generated"`
	FULL_NAME_REVERSED sq.StringField `ddl:"generated"`
	LAST_UPDATE        sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t ACTOR) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.ACTOR_ID}
}

func (t ACTOR) PrimaryKeyValues(actorID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{actorID}})
}

type ADDRESS struct {
	sq.TableStruct
	ADDRESS_ID  sq.NumberField `ddl:"primarykey"`
	ADDRESS     sq.StringField `ddl:"notnull"`
	ADDRESS2    sq.StringField
	DISTRICT    sq.StringField `ddl:"notnull"`
	CITY_ID     sq.NumberField `ddl:"notnull references={city onupdate=cascade ondelete=restrict index}"`
	POSTAL_CODE sq.StringField
	PHONE       sq.StringField `ddl:"notnull"`
	LAST_UPDATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t ADDRESS) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.ADDRESS_ID}
}

func (t ADDRESS) PrimaryKeyValues(addressID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{addressID}})
}

type CATEGORY struct {
	sq.TableStruct
	CATEGORY_ID sq.NumberField `ddl:"primarykey"`
	NAME        sq.StringField `ddl:"notnull"`
	LAST_UPDATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t CATEGORY) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.CATEGORY_ID}
}

func (t CATEGORY) PrimaryKeyValues(categoryID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{categoryID}})
}

type CITY struct {
	sq.TableStruct
	CITY_ID     sq.NumberField `ddl:"primarykey"`
	CITY        sq.StringField `ddl:"notnull"`
	COUNTRY_ID  sq.NumberField `ddl:"notnull references={country onupdate=cascade ondelete=restrict index}"`
	LAST_UPDATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t CITY) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.CITY_ID}
}

func (t CITY) PrimaryKeyValues(cityID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{cityID}})
}

type COUNTRY struct {
	sq.TableStruct
	COUNTRY_ID  sq.NumberField `ddl:"primarykey"`
	COUNTRY     sq.StringField `ddl:"notnull"`
	LAST_UPDATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t COUNTRY) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.COUNTRY_ID}
}

func (t COUNTRY) PrimaryKeyValues(countryID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{countryID}})
}

type CUSTOMER struct {
	sq.TableStruct
	CUSTOMER_ID sq.NumberField `ddl:"primarykey"`
	STORE_ID    sq.NumberField `ddl:"notnull references={store onupdate=cascade ondelete=restrict index}"`
	FIRST_NAME  sq.StringField `ddl:"notnull"`
	LAST_NAME   sq.StringField `ddl:"notnull index"`
	EMAIL       sq.StringField `ddl:"unique"`
	ADDRESS_ID  sq.NumberField `ddl:"notnull references={address onupdate=cascade ondelete=restrict index}"`
	ACTIVE      sq.NumberField `ddl:"notnull default=TRUE"`
	CREATE_DATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
	LAST_UPDATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
	_           struct{}       `ddl:"unique=email,first_name,last_name"`
}

func (t CUSTOMER) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.CUSTOMER_ID}
}

func (t CUSTOMER) PrimaryKeyValues(customerID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{customerID}})
}

type DEPARTMENT struct {
	sq.TableStruct
	DEPARTMENT_ID sq.UUIDField   `ddl:"notnull primarykey"`
	NAME          sq.StringField `ddl:"notnull"`
}

func (t DEPARTMENT) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.DEPARTMENT_ID}
}

func (t DEPARTMENT) PrimaryKeyValues(departmentID [16]byte) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{departmentID}})
}

type EMPLOYEE struct {
	sq.TableStruct
	EMPLOYEE_ID sq.UUIDField   `ddl:"notnull primarykey"`
	NAME        sq.StringField `ddl:"notnull"`
	TITLE       sq.StringField `ddl:"notnull"`
	MANAGER_ID  sq.UUIDField   `ddl:"references={employee.employee_id index}"`
}

func (t EMPLOYEE) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.EMPLOYEE_ID}
}

func (t EMPLOYEE) PrimaryKeyValues(employeeID [16]byte) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{employeeID}})
}

type EMPLOYEE_DEPARTMENT struct {
	sq.TableStruct `ddl:"primarykey=employee_id,department_id"`
	EMPLOYEE_ID    sq.UUIDField `ddl:"notnull references={employee index}"`
	DEPARTMENT_ID  sq.UUIDField `ddl:"notnull references={department index}"`
}

func (t EMPLOYEE_DEPARTMENT) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.EMPLOYEE_ID, t.DEPARTMENT_ID}
}

func (t EMPLOYEE_DEPARTMENT) PrimaryKeyValues(employeeID [16]byte, departmentID [16]byte) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{employeeID, departmentID}})
}

type FILM struct {
	sq.TableStruct
	FILM_ID              sq.NumberField `ddl:"primarykey"`
	TITLE                sq.StringField `ddl:"notnull index"`
	DESCRIPTION          sq.StringField
	RELEASE_YEAR         sq.NumberField
	LANGUAGE_ID          sq.NumberField `ddl:"notnull references={language onupdate=cascade ondelete=restrict index}"`
	ORIGINAL_LANGUAGE_ID sq.NumberField `ddl:"references={language.language_id onupdate=cascade ondelete=restrict index}"`
	RENTAL_DURATION      sq.NumberField `ddl:"notnull default=3"`
	RENTAL_RATE          sq.NumberField `ddl:"type=REAL notnull default=4.99"`
	LENGTH               sq.NumberField
	REPLACEMENT_COST     sq.NumberField `ddl:"type=REAL notnull default=19.99"`
	RATING               sq.StringField `ddl:"default='G'"`
	SPECIAL_FEATURES     sq.JSONField
	LAST_UPDATE          sq.TimeField `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t FILM) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.FILM_ID}
}

func (t FILM) PrimaryKeyValues(filmID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{filmID}})
}

type FILM_ACTOR struct {
	sq.TableStruct `ddl:"primarykey=actor_id,film_id"`
	ACTOR_ID       sq.NumberField `ddl:"notnull references={actor onupdate=cascade ondelete=restrict}"`
	FILM_ID        sq.NumberField `ddl:"notnull references={film onupdate=cascade ondelete=restrict index}"`
	LAST_UPDATE    sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t FILM_ACTOR) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.ACTOR_ID, t.FILM_ID}
}

func (t FILM_ACTOR) PrimaryKeyValues(actorID int64, filmID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{actorID, filmID}})
}

type FILM_CATEGORY struct {
	sq.TableStruct `ddl:"primarykey=film_id,category_id"`
	FILM_ID        sq.NumberField `ddl:"notnull references={film onupdate=cascade ondelete=restrict}"`
	CATEGORY_ID    sq.NumberField `ddl:"notnull references={category onupdate=cascade ondelete=restrict}"`
	LAST_UPDATE    sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t FILM_CATEGORY) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.FILM_ID, t.CATEGORY_ID}
}

func (t FILM_CATEGORY) PrimaryKeyValues(filmID int64, categoryID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{filmID, categoryID}})
}

type FILM_TEXT struct {
	sq.TableStruct `ddl:"virtual"`
	TITLE          sq.AnyField
	DESCRIPTION    sq.AnyField
	FILM_TEXT      sq.AnyField
	RANK           sq.AnyField
}

type INVENTORY struct {
	sq.TableStruct
	INVENTORY_ID sq.NumberField `ddl:"primarykey"`
	FILM_ID      sq.NumberField `ddl:"notnull references={film onupdate=cascade ondelete=restrict index}"`
	STORE_ID     sq.NumberField `ddl:"notnull references={store onupdate=cascade ondelete=restrict}"`
	LAST_UPDATE  sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
	_            struct{}       `ddl:"index=store_id,film_id"`
}

func (t INVENTORY) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.INVENTORY_ID}
}

func (t INVENTORY) PrimaryKeyValues(inventoryID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{inventoryID}})
}

type LANGUAGE struct {
	sq.TableStruct
	LANGUAGE_ID sq.NumberField `ddl:"primarykey"`
	NAME        sq.StringField `ddl:"notnull"`
	LAST_UPDATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t LANGUAGE) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.LANGUAGE_ID}
}

func (t LANGUAGE) PrimaryKeyValues(languageID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{languageID}})
}

type PAYMENT struct {
	sq.TableStruct
	PAYMENT_ID   sq.NumberField `ddl:"primarykey"`
	CUSTOMER_ID  sq.NumberField `ddl:"notnull references={customer onupdate=cascade ondelete=restrict index}"`
	STAFF_ID     sq.NumberField `ddl:"notnull references={staff onupdate=cascade ondelete=restrict index}"`
	RENTAL_ID    sq.NumberField `ddl:"references={rental onupdate=cascade ondelete=setnull index}"`
	AMOUNT       sq.NumberField `ddl:"type=REAL notnull"`
	PAYMENT_DATE sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
	LAST_UPDATE  sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t PAYMENT) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.PAYMENT_ID}
}

func (t PAYMENT) PrimaryKeyValues(paymentID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{paymentID}})
}

type RENTAL struct {
	sq.TableStruct
	RENTAL_ID    sq.NumberField `ddl:"primarykey"`
	RENTAL_DATE  sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
	INVENTORY_ID sq.NumberField `ddl:"notnull references={inventory onupdate=cascade ondelete=restrict index}"`
	CUSTOMER_ID  sq.NumberField `ddl:"notnull references={customer onupdate=cascade ondelete=restrict index}"`
	RETURN_DATE  sq.TimeField   `ddl:"type=DATETIME"`
	STAFF_ID     sq.NumberField `ddl:"notnull references={staff onupdate=cascade ondelete=restrict index}"`
	LAST_UPDATE  sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
	_            struct{}       `ddl:"index={inventory_id,customer_id,staff_id unique}"`
}

func (t RENTAL) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.RENTAL_ID}
}

func (t RENTAL) PrimaryKeyValues(rentalID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{rentalID}})
}

type STAFF struct {
	sq.TableStruct
	STAFF_ID    sq.NumberField `ddl:"primarykey"`
	FIRST_NAME  sq.StringField `ddl:"notnull"`
	LAST_NAME   sq.StringField `ddl:"notnull"`
	ADDRESS_ID  sq.NumberField `ddl:"notnull references={address onupdate=cascade ondelete=restrict index}"`
	PICTURE     sq.BinaryField
	EMAIL       sq.StringField `ddl:"unique"`
	STORE_ID    sq.NumberField `ddl:"references={store onupdate=cascade ondelete=restrict index}"`
	ACTIVE      sq.NumberField `ddl:"notnull default=TRUE"`
	USERNAME    sq.StringField `ddl:"notnull"`
	PASSWORD    sq.StringField
	LAST_UPDATE sq.TimeField `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t STAFF) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.STAFF_ID}
}

func (t STAFF) PrimaryKeyValues(staffID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{staffID}})
}

type STORE struct {
	sq.TableStruct
	STORE_ID         sq.NumberField `ddl:"primarykey"`
	MANAGER_STAFF_ID sq.NumberField `ddl:"notnull references={staff.staff_id onupdate=cascade ondelete=restrict index}"`
	ADDRESS_ID       sq.NumberField `ddl:"notnull references={address onupdate=cascade ondelete=restrict index}"`
	LAST_UPDATE      sq.TimeField   `ddl:"type=DATETIME notnull default=unixepoch()"`
}

func (t STORE) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.STORE_ID}
}

func (t STORE) PrimaryKeyValues(storeID int64) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{storeID}})
}

type TASK struct {
	sq.TableStruct
	TASK_ID       sq.UUIDField   `ddl:"notnull primarykey"`
	EMPLOYEE_ID   sq.UUIDField   `ddl:"notnull"`
	DEPARTMENT_ID sq.UUIDField   `ddl:"notnull"`
	TASK          sq.StringField `ddl:"notnull"`
	DATA          sq.JSONField
	_             struct{} `ddl:"foreignkey={employee_id,department_id references=employee_department index}"`
}

func (t TASK) PrimaryKeys() sq.RowValue {
	return sq.RowValue{t.TASK_ID}
}

func (t TASK) PrimaryKeyValues(taskID [16]byte) sq.Predicate {
	return t.PrimaryKeys().In(sq.RowValues{{taskID}})
}

type tables struct {
	Actor              ACTOR
	Address            ADDRESS
	Category           CATEGORY
	City               CITY
	Country            COUNTRY
	Customer           CUSTOMER
	Department         DEPARTMENT
	Employee           EMPLOYEE
	EmployeeDepartment EMPLOYEE_DEPARTMENT
	Film               FILM
	FilmActor          FILM_ACTOR
	FilmCategory       FILM_CATEGORY
	FilmText           FILM_TEXT
	Inventory          INVENTORY
	Language           LANGUAGE
	Payment            PAYMENT
	Rental             RENTAL
	Staff              STAFF
	Store              STORE
	Task               TASK
}

var Tables = tables{
	Actor:              sq.New[ACTOR](""),
	Address:            sq.New[ADDRESS](""),
	Category:           sq.New[CATEGORY](""),
	City:               sq.New[CITY](""),
	Country:            sq.New[COUNTRY](""),
	Customer:           sq.New[CUSTOMER](""),
	Department:         sq.New[DEPARTMENT](""),
	Employee:           sq.New[EMPLOYEE](""),
	EmployeeDepartment: sq.New[EMPLOYEE_DEPARTMENT](""),
	Film:               sq.New[FILM](""),
	FilmActor:          sq.New[FILM_ACTOR](""),
	FilmCategory:       sq.New[FILM_CATEGORY](""),
	FilmText:           sq.New[FILM_TEXT](""),
	Inventory:          sq.New[INVENTORY](""),
	Language:           sq.New[LANGUAGE](""),
	Payment:            sq.New[PAYMENT](""),
	Rental:             sq.New[RENTAL](""),
	Staff:              sq.New[STAFF](""),
	Store:              sq.New[STORE](""),
	Task:               sq.New[TASK](""),
}
